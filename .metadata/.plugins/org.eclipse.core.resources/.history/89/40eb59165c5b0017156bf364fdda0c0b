package models;

import java.io.Serializable;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import database.DataBase;

public class BeanTweet implements Serializable  {

	private static final long serialVersionUID = 1L;

	private int id;
	private int userId;
	private String text;
	private String date;
	private int retweets;
	private int comments;
	private int loves;
	private int isretweet;
	private boolean isLove;
	private boolean isRet;
	private boolean isComment;
	private String nameRET;
	private BeanUserInfo userInfo;

	protected String niceDate(Date date){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
		SimpleDateFormat month_date = new SimpleDateFormat("MMM");
		String month_name = month_date.format(cal.getTime());
		return String.valueOf(dayOfMonth) + " " + month_name;
	}
	
	public void love(String userId, String tweetId){
		String query = "CALL addLike("+userId+","+tweetId+");";
		DataBase DB;
		try {
			DB = new DataBase();
			DB.insertSQL(query);
			DB.disconnectBD();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void unlove(String userId, String tweetId){
		String query = "CALL deleteLike("+userId+","+tweetId+");";
		DataBase DB;
		try {
			DB = new DataBase();
			DB.insertSQL(query);
			DB.disconnectBD();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void newTweet(String body, int userId, String hash, int ret){
		String query = "CALL addTweet('"+userId+"','"+ body +"',"+ ret +");";
		String query1 = "Select tweetId from tweets where userId =" + userId + " order by tweetId desc";
		DataBase DB;
		try {
			DB = new DataBase();
			DB.insertSQL(query);
			ResultSet tweet = DB.executeSQL(query1);
			tweet.next();
			int id = tweet.getInt("tweetId");
			if(!hash.equals("null")){
				String htags[]  = hash.split(",");
				for(int i = 0; i < htags.length; ++i){
					String query2 = "CALL addHashtag("+id+",'"+htags[i]+"');";
					DB.insertSQL(query2);
				}
			}
			DB.disconnectBD();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public List<BeanTweet> getOwnTweets(String id) {
		String query = "SELECT * FROM tweets where userId='"+ id +"' order by tweetId desc";
		DataBase DB;
		try {
			DB = new DataBase();
			DataBase DB1 = new DataBase();
			List<BeanTweet> list = new ArrayList<BeanTweet>();
			userInfo = new BeanUserInfo(); 
			ResultSet tweets = DB.executeSQL(query);
			while (tweets.next()){
				BeanTweet tweet = new BeanTweet();
				tweet.setDate(tweet.niceDate(tweets.getDate("createDate")));
				tweet.setId(tweets.getInt("tweetId"));
				System.out.println(tweet.getId());
				tweet.setUserId(tweets.getInt("userId"));
				tweet.setText(tweets.getString("tweetText"));
				tweet.setRetweets(tweets.getInt("retNum"));
				tweet.setLoves(tweets.getInt("loveNum"));
				tweet.setComments(tweets.getInt("commNum"));
				tweet.setIsretweet(tweets.getInt("isRetweet"));
				if(tweets.getInt("isRetweet") == 0)
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserId()));
				else{
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserIdofTweet(tweet.getIsretweet())));
					tweet.setNameRET(userInfo.getNameById(tweet.getUserId()));
				}
				String query1 = "call getTweetReactions(" + id + "," + tweets.getInt("tweetId") + ");" ;
				ResultSet isLike = DB1.executeSQL(query1);
				isLike.next();
				tweet.setIsLove(isLike.getBoolean("isLike"));
				tweet.setIsRet(isLike.getBoolean("isRetweeted"));
				tweet.setIsComment(isLike.getBoolean("isComment"));
				list.add(tweet);
			}
			DB.disconnectBD();
			return list;
		}catch (Exception e) {
			e.printStackTrace();
		}	
		return null;
	}
	public List<BeanTweet> getTweetByTeam(String team) {
		String query = "call getTweetsByTeam('"+team+"');";
		DataBase DB;
		try {
			DB = new DataBase();
			List<BeanTweet> list = new ArrayList<BeanTweet>();
			userInfo = new BeanUserInfo(); 
			ResultSet tweets = DB.executeSQL(query);
			while (tweets.next()){
				DataBase DB1 = new DataBase();
				BeanTweet tweet = new BeanTweet();
				tweet.setDate(tweet.niceDate(tweets.getDate("createDate")));
				tweet.setId(tweets.getInt("tweetId"));
				tweet.setUserId(tweets.getInt("userId"));
				tweet.setText(tweets.getString("tweetText"));
				tweet.setRetweets(tweets.getInt("retNum"));
				tweet.setLoves(tweets.getInt("loveNum"));
				tweet.setComments(tweets.getInt("commNum"));
				tweet.setIsretweet(tweets.getInt("isRetweet"));
				if(tweets.getInt("isRetweet") == 0)
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserId()));
				else{
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserIdofTweet(tweet.getIsretweet())));
					tweet.setNameRET(userInfo.getNameById(tweet.getUserId()));
				}
				String query1 = "call getTweetReactions(" + id + "," + tweets.getInt("tweetId") + ");" ;
				ResultSet isLike = DB1.executeSQL(query1);
				isLike.next();
				tweet.setIsLove(isLike.getBoolean("isLike"));
				tweet.setIsRet(isLike.getBoolean("isRetweeted"));
				tweet.setIsComment(isLike.getBoolean("isComment"));
				DB1.disconnectBD();
				list.add(tweet);
			}
			DB.disconnectBD();
			return list;
		}catch (Exception e) {
			e.printStackTrace();
		}	
		return null;
	}
	
	public List<BeanTweet> getTweetByHash(String hash){
		String query = "call tweetsByHashtag('"+hash+"');";
		DataBase DB;
		try {
			DB = new DataBase();
			List<BeanTweet> list = new ArrayList<BeanTweet>();
			userInfo = new BeanUserInfo(); 
			ResultSet tweets = DB.executeSQL(query);
			while (tweets.next()){
				DataBase DB1 = new DataBase();
				BeanTweet tweet = new BeanTweet();
				tweet.setDate(tweet.niceDate(tweets.getDate("createDate")));
				tweet.setId(tweets.getInt("tweetId"));
				tweet.setUserId(tweets.getInt("userId"));
				tweet.setText(tweets.getString("tweetText"));
				tweet.setRetweets(tweets.getInt("retNum"));
				tweet.setLoves(tweets.getInt("loveNum"));
				tweet.setComments(tweets.getInt("commNum"));
				tweet.setIsretweet(tweets.getInt("isRetweet"));
				if(tweets.getInt("isRetweet") == 0)
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserId()));
				else{
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserIdofTweet(tweet.getIsretweet())));
					tweet.setNameRET(userInfo.getNameById(tweet.getUserId()));
				}
				String query1 = "call getTweetReactions(" + id + "," + tweets.getInt("tweetId") + ");" ;
				ResultSet isLike = DB1.executeSQL(query1);
				isLike.next();
				tweet.setIsLove(isLike.getBoolean("isLike"));
				tweet.setIsRet(isLike.getBoolean("isRetweeted"));
				tweet.setIsComment(isLike.getBoolean("isComment"));
				DB1.disconnectBD();
				list.add(tweet);
			}
			DB.disconnectBD();
			return list;
		}catch (Exception e) {
			e.printStackTrace();
		}	
		return null;
	}
	public List<BeanTweet> getTweets(int id){
		String query = "call tweetsOfFollowing("+id+")";
		
		DataBase DB;
		try {
			DB = new DataBase();
			List<BeanTweet> list = new ArrayList<BeanTweet>();
			userInfo = new BeanUserInfo(); 
			ResultSet tweets = DB.executeSQL(query);
			while (tweets.next()){
				DataBase DB1 = new DataBase();
				BeanTweet tweet = new BeanTweet();
				tweet.setDate(tweet.niceDate(tweets.getDate("createDate")));
				tweet.setId(tweets.getInt("tweetId"));
				tweet.setUserId(tweets.getInt("userId"));
				tweet.setText(tweets.getString("tweetText"));
				tweet.setRetweets(tweets.getInt("retNum"));
				tweet.setLoves(tweets.getInt("loveNum"));
				tweet.setComments(tweets.getInt("commNum"));
				tweet.setIsretweet(tweets.getInt("isRetweet"));
				if(tweets.getInt("isRetweet") == 0)
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserId()));
				else{
					tweet.setUserInfo(userInfo.getBasicInfo(tweet.getUserIdofTweet(tweet.getIsretweet())));
					tweet.setNameRET(userInfo.getNameById(tweet.getUserId()));
				}
				String query1 = "call getTweetReactions(" + id + "," + tweets.getInt("tweetId") + ");" ;
				ResultSet isLike = DB1.executeSQL(query1);
				isLike.next();
				tweet.setIsLove(isLike.getBoolean("isLike"));
				tweet.setIsRet(isLike.getBoolean("isRetweeted"));
				tweet.setIsComment(isLike.getBoolean("isComment"));
				DB1.disconnectBD();
				list.add(tweet);
			}
			DB.disconnectBD();
			return list;
		}catch (Exception e) {
			e.printStackTrace();
		}	
		return null;
	}
	
	public int getUserIdofTweet(int tweetId){
		String query = "Select userId from tweets where tweetId =" + tweetId;
		DataBase DB1;
		try {
			DB1 = new DataBase();
			int i = 0;
			ResultSet u = DB1.executeSQL(query);
			while(u.next()){
				i = u.getInt("userId");
			}
			DB1.disconnectBD();
			return i;
		}catch (Exception e) {
			e.printStackTrace();
		}
		return 0;
	}

	public int getId() {
		return id;
	}


	public void setId(int id) {
		this.id = id;
	}


	public int getUserId() {
		return userId;
	}


	public void setUserId(int userId) {
		this.userId = userId;
	}


	public String getText() {
		return text;
	}


	public void setText(String text) {
		this.text = text;
	}


	public String getDate() {
		return date;
	}


	public void setDate(String date) {
		this.date = date;
	}


	public int getRetweets() {
		return retweets;
	}


	public void setRetweets(int retweets) {
		this.retweets = retweets;
	}


	public int getLoves() {
		return loves;
	}


	public void setLoves(int loves) {
		this.loves = loves;
	}


	public int getIsretweet() {
		return isretweet;
	}


	public void setIsretweet(int isretweet) {
		this.isretweet = isretweet;
	}


	public BeanUserInfo getUserInfo() {
		return userInfo;
	}


	public void setUserInfo(BeanUserInfo userInfo) {
		this.userInfo = userInfo;
	}


	public int getComments() {
		return comments;
	}


	public void setComments(int comments) {
		this.comments = comments;
	}

	public List<String> getTT() {
		String query = "CALL mostUsedHashtags();";
		DataBase DB;
		List<String> HashTT = new ArrayList<String>();
		try {
			DB = new DataBase();
			ResultSet TT = DB.executeSQL(query);
			while(TT.next()){
				HashTT.add(TT.getString("hashText"));
			}
			DB.disconnectBD();
			return HashTT;
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	public List<MVP> getMVP() {
		String query = "CALL mostFollowedUsers();";
		DataBase DB;
		List<MVP> HashTT = new ArrayList<MVP>();
		try {
			DB = new DataBase();
			ResultSet TT = DB.executeSQL(query);
			while(TT.next()){
				MVP user = new MVP();
				if(!TT.getString("userName").equals("admin")){
					user.setName(TT.getString("userName"));
					user.setImage(TT.getString("profileImg"));
					HashTT.add(user);
				}
			}
			DB.disconnectBD();
			return HashTT;
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public boolean getIsLove() {
		return isLove;
	}

	public void setIsLove(boolean b) {
		this.isLove = b;
	}

	public boolean getIsComment() {
		return isComment;
	}
	
	public void setIsComment(boolean b){
		this.isComment = b;
	}

	public void setComment(boolean isComment) {
		this.isComment = isComment;
	}

	public void delete(String tweetId) {
		String query = "call deleteTweet("+ tweetId +")";
		System.out.println(query);
		DataBase DB;
		try {
			DB = new DataBase();
			DB.insertSQL(query);
			DB.disconnectBD();
		}catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public boolean getIsRet() {
		return isRet;
	}

	public void setIsRet(boolean isRet) {
		this.isRet = isRet;
	}

	public String getNameRET() {
		return nameRET;
	}

	public void setNameRET(String nameRET) {
		this.nameRET = nameRET;
	}

	

}

	